---
- name: Install k3s on localhost
  shell: |
    curl -sfL https://get.k3s.io | sh -
  args:
    creates: /usr/local/bin/kubectl

- name: Ensure kubectl is available
  command: kubectl version --client
  register: kubectl_version

- name: Wait for k3s configuration file
  wait_for:
    path: /etc/rancher/k3s/k3s.yaml
    state: present
    timeout: 60
  when: kubectl_version.stdout is defined

- name: Set up kubectl config file
  shell: |
    mkdir -p ~/.kube
    cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
  when: kubectl_version.stdout is defined

- name: Install bash-completion package
  become: true
  package:
    name: bash-completion
    state: present

- name: Add kubectl autocomplete to bashrc
  lineinfile:
    path: ~/.bashrc
    line: 'source <(kubectl completion bash)'
    state: present

- name: Source bashrc to apply changes
  shell: |
    bash -c 'source ~/.bashrc'
  args:
    executable: /bin/bash

- name: Wait for Kubernetes nodes to be ready
  command: kubectl wait --for=condition=Ready node --all --timeout=60s
  register: wait_result
  until: wait_result.rc == 0
  retries: 5
  delay: 10
    
#setup nginx deployment in k3s local cluster                 
- name: Apply Nginx ConfigMap
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/nginx-configmap.yml') }}"

- name: Apply Nginx Deployment
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/nginx-deployment.yml') }}"

- name: Wait for Nginx deployment to be ready using kubectl
  shell: |
    kubectl wait --namespace=default --for=condition=available deployment/nginx-deployment --timeout=60s
  register: wait_result
  until: wait_result.rc == 0
  retries: 5
  delay: 10
      
- name: Apply Nginx Service
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/nginx-service.yml') }}"

- name: Apply Nginx HorizontalPodAutoscaler
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/nginx-hpa.yml') }}"

- name: Create systemd service file for nginx port-forward
  copy:
    dest: /etc/systemd/system/nginx-port-forward.service
    content: |
      [Unit]
      Description=Port forward for nginx service
      After=network.target

      [Service]
      User=root
      ExecStart=/usr/local/bin/kubectl -n default port-forward --address 0.0.0.0 service/nginx-service 8080:80
      Restart=always
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd to pick up new nginx-port-forward service
  command: systemctl daemon-reload

- name: Enable and restart nginx-port-forward service
  systemd:
    name: nginx-port-forward
    enabled: yes
    state: restarted

#setup monitoring
- name: Create namespace for monitoring
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: monitoring

- name: Apply Prometheus ConfigMap
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/prometheus-configmap.yml') }}"

- name: Apply Prometheus Deployment
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/prometheus-deployment.yml') }}"

- name: Wait for prometheus deployment to be ready using kubectl
  shell: |
    kubectl wait --namespace=monitoring --for=condition=available deployment/prometheus --timeout=60s
  register: wait_result
  until: wait_result.rc == 0
  retries: 5
  delay: 10

- name: Apply Prometheus Service
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/prometheus-service.yml') }}"

- name: Check if Grafana Secret exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: monitoring
    name: grafana-admin-credentials
  register: grafana_secret_info
  ignore_errors: true

- name: Apply Grafana Secret
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/grafana-secret.j2') }}"
  when: grafana_secret_info.resources | length == 0

- name: Apply Grafana Deployment
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/grafana-deployment.yml') }}"

- name: Wait for grafana deployment to be ready using kubectl
  shell: |
    kubectl wait --namespace=monitoring --for=condition=available deployment/grafana --timeout=60s
  register: wait_result
  until: wait_result.rc == 0
  retries: 5
  delay: 10

- name: Apply Grafana Service
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/grafana-service.yml') }}"

- name: Create systemd service file for prometheus port-forward
  copy:
    dest: /etc/systemd/system/prometheus-port-forward.service
    content: |
      [Unit]
      Description=Port forward for prometheus service
      After=network.target

      [Service]
      User=root
      ExecStart=/usr/local/bin/kubectl -n monitoring port-forward --address 0.0.0.0 service/prometheus 9090:9090
      Restart=always
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd to pick up new prometheus-port-forward service
  command: systemctl daemon-reload

- name: Enable and restart prometheus-port-forward service
  systemd:
    name: prometheus-port-forward
    enabled: yes
    state: restarted

- name: Create systemd service file for grafana port-forward
  copy:
    dest: /etc/systemd/system/grafana-port-forward.service
    content: |
      [Unit]
      Description=Port forward for grafana service
      After=network.target

      [Service]
      User=root
      ExecStart=/usr/local/bin/kubectl -n monitoring port-forward --address 0.0.0.0 service/grafana 3000:3000
      Restart=always
      RestartSec=5

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd to pick up new grafana-port-forward service
  command: systemctl daemon-reload

- name: Enable and restart grafana-port-forward service
  systemd:
    name: grafana-port-forward
    enabled: yes
    state: restarted

- name: Create Prometheus datasource in Grafana
  community.grafana.grafana_datasource:
    grafana_url: "http://localhost:3000"
    grafana_user: "admin"
    grafana_password: "admin"
    name: "Prometheus"
    ds_type: "prometheus"
    ds_url: "http://prometheus.monitoring.svc:9090"
    access: "proxy"
    is_default: true
    tls_skip_verify: true
    state: present
  register: datasource_result

- name: Create k6 dashboard in Grafana
  community.grafana.grafana_dashboard:
    grafana_url: http://localhost:3000
    grafana_user: admin
    grafana_password: admin
    dashboard_url: https://grafana.com/api/dashboards/19665/revisions/2/download
    folder: "General"
    overwrite: true

#do a load test on nginx deployment
- name: Delete k6 load test job if already exists 
  kubernetes.core.k8s:
    state: absent
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: k6-load-test
        namespace: default

- name: Apply k6 Load Test ConfigMap
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/k6-load-test-configmap.yml') }}"

- name: Apply k6 Load Test Job
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', 'files/k6-load-test-job.yml') }}"
